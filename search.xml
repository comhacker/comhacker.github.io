<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ESP定律脱壳</title>
    <url>/posts/43303/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>加壳是利用特殊的算法事先对程序源代码进行压缩，并向程序里面注入解压的代码，这段解压代码会先于源代码执行。在程序执行时，会自动将原始代码进行解压，然后跳转到原程序的入口点，继续执行原程序。而在执行完解压过程后需要将栈恢复到解压前的状态，即ESP会回到解压前的位置，因此，我们可以通过判断ESP是否回到初始位置来判断程序是否已经达到入口点（OEP）。</p>
<p>接下来以脱upx壳为例：</p>
<p>程序源代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int main() &#123;</span><br><span class="line">	char s[] = &quot;ek`fz`abcdefg|&quot;;</span><br><span class="line">	char input[15];</span><br><span class="line">	int i;</span><br><span class="line">	printf(&quot;请输入你的flag:\n&quot;);</span><br><span class="line">	scanf(&quot;%14s&quot;, input,sizeof(input));</span><br><span class="line">	for (i = 0; i &lt; 14; i++)</span><br><span class="line">		input[i] -= 1;</span><br><span class="line">	if (!strcmp(input, s))</span><br><span class="line">		printf(&quot;right!&quot;);</span><br><span class="line">	else</span><br><span class="line">		printf(&quot;wrong!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h1><p>一共分为三步：</p>
<ol>
<li>寻找OEP</li>
<li>dump出初步的脱壳程序</li>
<li>修复程序</li>
</ol>
<h2 id="寻找OEP"><a href="#寻找OEP" class="headerlink" title="寻找OEP"></a>寻找OEP</h2><p>使用xdbg打开</p>
<img src="/posts/43303/image-20241206232732823.png" class="" title="image-20241206232732823">

<p>可以看到开始就是pushad指令，这个指令是将所有寄存器都压入栈。</p>
<p>一般的壳都会在开始时进行压栈，然后在解压结束时进行出栈。</p>
<p>此时按F8单步步过，可以看到右边的ESP发生了变化</p>
<img src="/posts/43303/image-20241206232654462.png" class="" title="image-20241206232654462">

<p>点击右边ESP，按右键，选内存窗口中转到，内存1</p>
<img src="/posts/43303/image-20241206232906388.png" class="" title="image-20241206232906388">

<p>此时左下角的内存窗口已经转移到ESP的位置</p>
<img src="/posts/43303/image-20241206233019638.png" class="" title="image-20241206233019638">

<p>选定第一个字节，按右键，断点，硬件访问，接下来三个里面随便选一个</p>
<img src="/posts/43303/image-20241206233108832.png" class="" title="image-20241206233108832">

<p>此时下好了断点，按F9让程序一直运行直到碰到断点处</p>
]]></content>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>函数调用过程</title>
    <url>/posts/24481/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p>源代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int add(int a,int b)&#123;</span><br><span class="line">    int x,y;</span><br><span class="line">    x=a,y=b;</span><br><span class="line">    return x+y;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int a=1,b=2;</span><br><span class="line">    printf(&quot;%d&quot;,add(a,b));</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来放入x32dbg里面调试，看到：</p>
<img src="/posts/24481/image-20241204220215454.png" class="" title="image-20241204220215454">

<p>先从main函数开始看。</p>
<p>创建新的堆栈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br></pre></td></tr></table></figure>

<p>先把主函数堆栈中的ebp指针压入栈，在将主函数中的esp赋值给ebp经过这样的操作，会在原先的堆栈上新建一个堆栈供被调函数用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sub esp,20</span><br></pre></td></tr></table></figure>

<p>为变量开辟0x20字节的新空间</p>
<img src="/posts/24481/image-20241204222756002.png" class="" title="image-20241204222756002">

<p>变量赋值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov dword ptr ss:[esp+1C],1             //a=1</span><br><span class="line">mov dword ptr ss:[esp+18],2             //b=2</span><br></pre></td></tr></table></figure>

<p>接下来时函数调用。调用过程主要分两部分：1、主函数部分。2、被调函数部分。</p>
<h1 id="主函数部分："><a href="#主函数部分：" class="headerlink" title="主函数部分："></a>主函数部分：</h1><h2 id="1、参数压入栈"><a href="#1、参数压入栈" class="headerlink" title="1、参数压入栈"></a>1、参数压入栈</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0040153A | 8B4424 18                  | mov eax,dword ptr ss:[esp+18]           |b-&gt;eax</span><br><span class="line">0040153E | 894424 04                  | mov dword ptr ss:[esp+4],eax            |eax-&gt;[esp+4]</span><br><span class="line">00401542 | 8B4424 1C                  | mov eax,dword ptr ss:[esp+1C]           |a-&gt;eax</span><br><span class="line">00401546 | 890424                     | mov dword ptr ss:[esp],eax              |eax-&gt;[esp]</span><br></pre></td></tr></table></figure>



<p>注意到压入栈的顺序与参数顺序是相反的，调用时add(a,b)，但是b先入栈，a后入。</p>
<h2 id="2、调用函数"><a href="#2、调用函数" class="headerlink" title="2、调用函数"></a>2、调用函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401549 | E8 B2FFFFFF                | call &lt;test.add&gt;                         |</span><br></pre></td></tr></table></figure>

<p>在执行call语句时，ESP发生了改变</p>
<img src="/posts/24481/image-20241204225304838.png" class="" title="image-20241204225304838">

<p>是将0x40154E压入了栈，而这正是00401549+5，即call指令的下一条指令。</p>
<p>所以实际上在执行“call &lt;test.add&gt; ”时，可以拆解为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push 0x40154E</span><br><span class="line">jmp  0x401500</span><br></pre></td></tr></table></figure>

<h1 id="被调函数部分："><a href="#被调函数部分：" class="headerlink" title="被调函数部分："></a>被调函数部分：</h1><h2 id="1、创建新堆栈"><a href="#1、创建新堆栈" class="headerlink" title="1、创建新堆栈"></a>1、创建新堆栈</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401500 | 55                         | push ebp                                |</span><br><span class="line">00401501 | 89E5                       | mov ebp,esp                             |</span><br></pre></td></tr></table></figure>

<p>先将原栈底入栈，在将新栈底设置为原栈顶，即：</p>


<p>这个时候ESP和EBP都在0x61FE78处，再执行压栈出栈也不会影响到主函数堆栈</p>
<h2 id="2、为参数预留空间"><a href="#2、为参数预留空间" class="headerlink" title="2、为参数预留空间"></a>2、为参数预留空间</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401503 | 83EC 10                    | sub esp,10                       //空出0x10字节的空间</span><br></pre></td></tr></table></figure>

<h2 id="3、取出形参"><a href="#3、取出形参" class="headerlink" title="3、取出形参"></a>3、取出形参</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401506 | 8B45 08                    | mov eax,dword ptr ss:[ebp+8]            |</span><br><span class="line">00401509 | 8945 FC                    | mov dword ptr ss:[ebp-4],eax            | </span><br><span class="line">0040150C | 8B45 0C                    | mov eax,dword ptr ss:[ebp+C]            |</span><br><span class="line">0040150F | 8945 F8                    | mov dword ptr ss:[ebp-8],eax            |</span><br></pre></td></tr></table></figure>

<p>这里的[EBP+8]处是main函数压入的第二个参数（即1），[EBP+C]是main函数压入的第一个参数（即2）</p>
<img src="/posts/24481/image-20241204231114451.png" class="" title="image-20241204231114451">

<h2 id="4、返回值"><a href="#4、返回值" class="headerlink" title="4、返回值"></a>4、返回值</h2><p>在大多数情况，函数的返回值并不是压入栈，而是存储在寄存器eax之中</p>
<h2 id="5、函数结束"><a href="#5、函数结束" class="headerlink" title="5、函数结束"></a>5、函数结束</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0040151A | C9                         | leave                                   |</span><br></pre></td></tr></table></figure>

<p>等同于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov esp,ebp</span><br><span class="line">pop ebp</span><br></pre></td></tr></table></figure>

<p>ESP和EBP都调回了跳转前的位置。然后接下来还要返回main函数里面，即：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0040151B | C3                         | ret                                     |</span><br></pre></td></tr></table></figure>

<p>在执行ret或retn时，等同于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pop rip</span><br></pre></td></tr></table></figure>

<p>先将之前存储的下一条指令的地址弹出到rip之中，指示 CPU 下一条指令应该从哪里开始执行，然后就会回到main函数里面（rip里的位置）</p>
<p><strong><u>经历了上面两步，ESP和EBP会回到调用函数前的位置，这就是堆栈平衡。</u></strong></p>
<h1 id="堆栈平衡与手动脱壳："><a href="#堆栈平衡与手动脱壳：" class="headerlink" title="堆栈平衡与手动脱壳："></a>堆栈平衡与手动脱壳：</h1><p>加壳原理其实与SMC自修改代码有相同之处，加壳其实就是对可执行文件进行压缩或加密，并在程序里面加入解压或解密的必要代码的过程。当程序运行起来时，壳会加载并执行一个解包过程，最终将原始代码加载到内存中并跳转到入口点开始正常执行。这类似于函数调用，于是脱壳的关键就是找到壳解包完成的时机，然后dump下来。在调用壳解包的代码时，满足函数调用的堆栈平衡定理（ESP定理），于是我们可以观察其ESP和EBP的位置，当壳解包完成时，ESP指针会回到执行解密程序之前的值，程序执行一个大的跳转跳到程序入口点(EP点），此时dump下来就可以得到脱壳后的可执行文件。</p>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>国城杯wp</title>
    <url>/posts/8147/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="Crush’s-secret"><a href="#Crush’s-secret" class="headerlink" title="Crush’s secret"></a>Crush’s secret</h2><p>有SMC，动调</p>
<img src="/posts/8147/image-20241207135656066.png" class="" title="image-20241207135656066">

<p>把它的主要逻辑简化一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void encode(unsigned int *a1, int a2,unsigned int* a3)   </span><br><span class="line">&#123;</span><br><span class="line">  int v3; // eax</span><br><span class="line">  int v4; // edx</span><br><span class="line">  int v5; // edx</span><br><span class="line">  int v7; // [esp+D4h] [ebp-44h]</span><br><span class="line">  int v8; // [esp+E0h] [ebp-38h]</span><br><span class="line">  unsigned int i; // [esp+ECh] [ebp-2Ch]</span><br><span class="line">  unsigned int v10; // [esp+F8h] [ebp-20h]</span><br><span class="line">  unsigned int v11; // [esp+104h] [ebp-14h]</span><br><span class="line"></span><br><span class="line">    v8 = 32;</span><br><span class="line">    v10 = 0;</span><br><span class="line">    do   //32次循环</span><br><span class="line">    &#123;</span><br><span class="line">      v10 -= 0x61C88647;</span><br><span class="line">      v7 = (v10 &gt;&gt; 2) &amp; 3;</span><br><span class="line">      a1[0] += (((a1[1] ^ a3[v7 ^ 0 &amp; 3]) + (a1[1] ^ v10)) ^ (((16 * a1[1]) ^ (a1[1] &gt;&gt; 3))+ ((4 *a1[1]) ^ (a1[1] &gt;&gt; 5))));</span><br><span class="line">      a1[1] += (((a1[0] ^ a3[v7 ^ 1 &amp; 3]) + (a1[0] ^ v10)) ^ (((16 * a1[0]) ^ (a1[0] &gt;&gt; 3))+ ((4 *a1[0]) ^ (a1[0] &gt;&gt; 5))));</span><br><span class="line">      --v8;</span><br><span class="line">    &#125;</span><br><span class="line">    while ( v8 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是密文</p>
<img src="/posts/8147/image-20241207135840979.png" class="" title="image-20241207135840979">

<p>这是密钥：</p>
<img src="/posts/8147/image-20241207140402515.png" class="" title="image-20241207140402515">

<p>写脚本解密：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdint.h&gt;</span><br><span class="line">void decode(unsigned int *a1, int a2,unsigned int* a3)   //a1=data,a3=key</span><br><span class="line">&#123;</span><br><span class="line">  int v3; // eax</span><br><span class="line">  int v4; // edx</span><br><span class="line">  int v5; // edx</span><br><span class="line">  int v7; // [esp+D4h] [ebp-44h]</span><br><span class="line">  int v8; // [esp+E0h] [ebp-38h]</span><br><span class="line">  unsigned int i; // [esp+ECh] [ebp-2Ch]</span><br><span class="line">  unsigned int v10; // [esp+F8h] [ebp-20h]</span><br><span class="line">  unsigned int v11; // [esp+104h] [ebp-14h]</span><br><span class="line"></span><br><span class="line">    v8 = 32;</span><br><span class="line">    v10 = 0;</span><br><span class="line">    do   //32次循环</span><br><span class="line">    &#123;</span><br><span class="line">      v10 -= 0x61C88647;</span><br><span class="line">      v7 = (v10 &gt;&gt; 2) &amp; 3;</span><br><span class="line">      a1[0] += (((a1[1] ^ a3[v7 ^ 0 &amp; 3]) + (a1[1] ^ v10)) ^ (((16 * a1[1]) ^ (a1[1] &gt;&gt; 3))+ ((4 *a1[1]) ^ (a1[1] &gt;&gt; 5))));</span><br><span class="line">      a1[1] += (((a1[0] ^ a3[v7 ^ 1 &amp; 3]) + (a1[0] ^ v10)) ^ (((16 * a1[0]) ^ (a1[0] &gt;&gt; 3))+ ((4 *a1[0]) ^ (a1[0] &gt;&gt; 5))));</span><br><span class="line">      --v8;</span><br><span class="line">    &#125;</span><br><span class="line">    while ( v8 );</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    unsigned int data[]=&#123;0xf31419a2,0x2f193025,0x6e995655,0x75d355fe,0x42e6b4e8,0xf97e03e,0x9f4676d0,0x2488d889,0x8e5cf3d7,0x18c58297,0x2652c22c,0x912ccd2b&#125;;</span><br><span class="line">    unsigned int key[]=&#123;0x5201314,0x52013140,0x5201314,0x52013140&#125;;</span><br><span class="line">    int i;</span><br><span class="line">    for(i=0;i&lt;6;i++)&#123;</span><br><span class="line">        decode(&amp;data[i*2],2,key);</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;12;i++)&#123;</span><br><span class="line">        printf(&quot;%#x,&quot;,data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  //D0g3xGC&#123;The_wind_stops_at_autumn_water_and_I_stop_at_you&#125;</span><br></pre></td></tr></table></figure>

<img src="/posts/8147/image-20241207140839246.png" class="" title="image-20241207140839246">

<h2 id="round"><a href="#round" class="headerlink" title="round"></a>round</h2><p>安卓题，前面半段是魔改的base64加密，解密出来的结果是round_and</p>
<p>后面半段只能用爆破法来解。但是它前一个字符加密的结果会影响到下一个加密，所以必须采用逐个破解法。</p>
<p>本来一开始想各种方法出了前几个字符”_rounD“，但是后面的可能性太多了，没办法一个一个试，于是想用12个循环来暴力破解（）。</p>
<p>12个字符，每个字符有127种可能，就是127的12次方，上亿种可能了，再加上每一种情况都要调用round函数进行判断，结果很明显，代码写出来了但是运行不出结果。在尝试很多方法后无功而反。</p>
<p>最后，在看了其他师傅wp后才搞清楚怎么写爆破脚本。</p>
<p>这是其他师傅的脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def makebox(s):                             # 构建数组盒</span><br><span class="line">    iArr = [1023 - i for i in range(1024)]</span><br><span class="line">    for i in range(1024):</span><br><span class="line">        iArr[i] = iArr[i] ^ ord(s[i % 12])</span><br><span class="line">    return iArr</span><br><span class="line"></span><br><span class="line">box = makebox(&quot;c9m1bRmfY5Wk&quot;)</span><br><span class="line"></span><br><span class="line">def round(iArr, str):                   # 加密函数</span><br><span class="line">    length = len(str)</span><br><span class="line">    iArr2 = [0 for _ in range(length)]</span><br><span class="line">    iArr3 = [352, 646, 752, 882, 65, 0, 122, 0, 0, 7, 350, 360]</span><br><span class="line">    i = 33</span><br><span class="line">    for i2 in range(0, length):</span><br><span class="line">        charAt = ord(str[i2])</span><br><span class="line">        for _ in range(0, 32):</span><br><span class="line">            i4 = (iArr[i] ^ charAt) % 5</span><br><span class="line">            if i4 == 0:</span><br><span class="line">                charAt = (charAt + iArr[i]) % 1024</span><br><span class="line">                i = (i + charAt) % 1024</span><br><span class="line">            elif i4 == 1:</span><br><span class="line">                charAt = ((charAt - iArr[i]) % 1024 + 1024) % 1024  # 确保结果非负</span><br><span class="line">                i = (i + charAt) % 1024</span><br><span class="line">            elif i4 == 2:</span><br><span class="line">                charAt = (charAt ^ iArr[i]) % 1024</span><br><span class="line">                i = (i + charAt) % 1024</span><br><span class="line">            elif i4 == 3:</span><br><span class="line">                charAt = (charAt &gt;&gt; 3) % 1024</span><br><span class="line">                i = (i + charAt) % 1024</span><br><span class="line">            elif i4 == 4:</span><br><span class="line">                charAt = (charAt &lt;&lt; 3) % 1024</span><br><span class="line">                i = (i + charAt) % 1024</span><br><span class="line">        iArr2[i2] = charAt</span><br><span class="line">    return iArr2</span><br><span class="line"></span><br><span class="line">import string</span><br><span class="line">dic = string.ascii_letters + &#x27;_&#x27;            # 创建一个由大小写字母和下划线组成的字典，字符串元素由这里取</span><br><span class="line"></span><br><span class="line">iArr3 = [352, 646, 752, 882, 65, 0, 122, 0, 0, 7, 350, 360]</span><br><span class="line"></span><br><span class="line"># 使用缓存来存储中间结果</span><br><span class="line">cache = &#123;&#125;      # 字典，用来排除已经尝试过的字符串</span><br><span class="line"></span><br><span class="line">def dfs(idx, ans):          # 关键递归函数</span><br><span class="line">    if idx == len(iArr3):       # 长度达到指定值则代表找到了符合条件的</span><br><span class="line">        print(ans)  # 找到符合条件的字符串</span><br><span class="line">        return True</span><br><span class="line">    for i in dic:         #在字符数组里面找字符</span><br><span class="line">        new_ans = ans + i      # 这里一定要用一个新的字符串来承接，因为后面的步骤可能会改变字符串</span><br><span class="line">        if new_ans not in cache:     # 判断是否是尝试过的字符串</span><br><span class="line">            cache[new_ans] = round(box, new_ans)    # 没尝试过则加入字典</span><br><span class="line">        res = cache[new_ans]        # 取出经过加密后的字符串</span><br><span class="line">        if res[-1] == iArr3[idx]:       # 如果相同则继续判断下一位</span><br><span class="line">            if dfs(idx + 1, new_ans):</span><br><span class="line">                return True</span><br><span class="line">    return False</span><br><span class="line"></span><br><span class="line">if not dfs(0, &#x27;&#x27;):</span><br><span class="line">    print(&quot;No solution found&quot;)</span><br></pre></td></tr></table></figure>

<p>他是利用了虽然前一个字符会影响后一个字符，但是后一个字符不会影响前一个字符这一特点（因为在对每个字符进行加密时，i的值会不断变化），这里使用了DFS算法，递归调用，比我之前12个循环好在：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、代码简短，易理解</span><br><span class="line">2、进行了剪枝，提前排除不可能满足条件的字符串</span><br></pre></td></tr></table></figure>

<p>于是他的这段代码可以在几秒内快速运行出一个结果“_rounD_we_go”。</p>
<p>在理解了这位师傅脚本的主要逻辑后，我自己写了一个脚本，主要方法还是一样的，只不过稍微修改，让他把所有结果都运行出来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int data[]=&#123;352, 646, 752, 882, 65, 0, 122, 0, 0, 7, 350, 360&#125;;</span><br><span class="line">int arr[1024];char flag[13]=&quot;&quot;;</span><br><span class="line">void makebox(char *s)&#123;</span><br><span class="line">    int  i;</span><br><span class="line">    for(i=0;i&lt;1024;i++)&#123;</span><br><span class="line">      arr[i]=1023-i;</span><br><span class="line">      arr[i]^=s[i%12];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">char *Round(int *result,char *s,int len)&#123;</span><br><span class="line">    int a=33;</span><br><span class="line">    int i2,i3,i4,num2,j;</span><br><span class="line">    int at;int i;int num,rip;</span><br><span class="line">    for(i=0;i&lt;len;i++)&#123;</span><br><span class="line">        at=s[i];</span><br><span class="line">        for(i3=0;i3&lt;32;i3++)&#123;</span><br><span class="line">            i4=((arr[a]^at)%5+5)%5;</span><br><span class="line">            if(i4==0) &#123;num=(at+arr[a])%1024;rip=(a+num)%1024;&#125;</span><br><span class="line">            if(i4==1) &#123;num=((at-arr[a])%1024+1024)%1024;rip=(a+num)%1024;&#125;</span><br><span class="line">            if(i4==2) &#123;num=((at^arr[a])%1024+1024)%1024;rip=(a+num)%1024;&#125;</span><br><span class="line">            if(i4==3) &#123;num=(at&gt;&gt;3)%1024;rip=(a+num)%1024;&#125;</span><br><span class="line">            if(i4==4) &#123;num=(at&lt;&lt;3)%1024;rip=(a+num)%1024;&#125;</span><br><span class="line">            at=num;a=rip;</span><br><span class="line">        &#125;</span><br><span class="line">        result[i]=at;</span><br><span class="line">    &#125;</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br><span class="line">void DSF(int len)&#123;</span><br><span class="line">    if(len==12)&#123;printf(&quot;%s\n&quot;,flag);return;&#125;</span><br><span class="line">    int i;char temp[13];</span><br><span class="line">    int result[13];</span><br><span class="line">    for(i=33;i&lt;127;i++)&#123;</span><br><span class="line">        strcpy(temp,flag);</span><br><span class="line">        temp[len]=(char)i;</span><br><span class="line">        Round(result,temp,len+1);</span><br><span class="line">        if(result[len]==data[len]) &#123;flag[len]=(char)i;DSF(len+1);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    char s[]=&quot;c9m1bRmfY5Wk&quot;;</span><br><span class="line">    makebox(s);</span><br><span class="line">    DSF(0);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个脚本会把所有满足结果的字符串打印出来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_roun2t$e_%o</span><br><span class="line">_roun2t$e_`o</span><br><span class="line">_roun2t$e_go</span><br><span class="line">_roun7t$e_%o</span><br><span class="line">_roun7t$e_`o</span><br><span class="line">_roun7t$e_go</span><br><span class="line">_roun&lt;&#x27;-n4TO</span><br><span class="line">_rounD_EJ4TO</span><br><span class="line">_rounD_PCi?O</span><br><span class="line">_rounD_\Ci?O</span><br><span class="line">_rounD_we_%o</span><br><span class="line">_rounD_we_`o</span><br><span class="line">_rounD_we_go</span><br></pre></td></tr></table></figure>

<p>在里面挑一个最正常的“_rounD_we_go”与前半段组成flag：D0g3xGC{round_and_rounD_we_go}</p>
]]></content>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>蜀道山wp</title>
    <url>/posts/46980/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="Map-Maze"><a href="#Map-Maze" class="headerlink" title="Map_Maze"></a>Map_Maze</h2><p>非常好的一道迷宫题，击碎了我对指针的自信~~</p>
<p>主函数：</p>
<img src="/posts/46980/image-20241203205913912.png" class="" title="image-20241203205913912">

<p>但是建图函数和判断函数极其抽象。建图函数先截取一部分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __cdecl create_map(_DWORD *a1, _DWORD *a2)</span><br><span class="line">&#123;</span><br><span class="line">  for ( i = 0; i &lt; 15; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    for ( j = 0; j &lt; 15; ++j )</span><br><span class="line">      v5[15 * i + j] = sub_401080(0);   //先分配255个空间（不连续的），地址作为数组v5的元素（实际越界到了v6）</span><br><span class="line">  &#125;</span><br><span class="line">  for ( k = 1; k &lt; 15; ++k )</span><br><span class="line">    *(_DWORD *)v5[k] = 1;        //这里的赋值是取v5[i]的值转化为指针，将指针指向的地址赋值为1（或0）</span><br><span class="line">  for ( m = 9; m &lt; 15; ++m )</span><br><span class="line">    *(_DWORD *)v5[m + 15] = 1;</span><br><span class="line">    ......      //省略了中间的赋值环节</span><br><span class="line">    ......</span><br><span class="line">  for ( i27 = 13; i27 &lt; 15; ++i27 )</span><br><span class="line">    *(_DWORD *)v6[i27 + 90] = 1;</span><br><span class="line">  for ( i28 = 0; i28 &lt; 12; ++i28 )</span><br><span class="line">    *(_DWORD *)v6[i28 + 105] = 1;</span><br><span class="line">  for ( i29 = 0; i29 &lt; 15; ++i29 )     //这个双循环是重头戏：</span><br><span class="line">  &#123;</span><br><span class="line">    for ( i30 = 0; i30 &lt; 15; ++i30 )     </span><br><span class="line">    &#123;     //为了方便表示，我将*v5[15 * i29 + i30]写为a[],也就是指针a等于v5对应下标的元素转化为的指针</span><br><span class="line">      if ( i29 &gt; 0 )    //i29&gt;0，说明不在第一行，意味着上方元素存在</span><br><span class="line">        *(_DWORD *)(v5[15 * i29 + i30] + 4) = v5[15 * i29 - 15 + i30];  //将上方元素的地址赋值给a[1]</span><br><span class="line">      if ( i29 &lt; 14 )   //不在最后一行，即下方元素存在</span><br><span class="line">        *(_DWORD *)(v5[15 * i29 + i30] + 8) = v5[15 * i29 + 15 + i30];  //将下方元素的地址赋值给a[2]</span><br><span class="line">      if ( i30 &gt; 0 )</span><br><span class="line">        *(_DWORD *)(v5[15 * i29 + i30] + 12) = v5[15 * i29 - 1 + i30];  //将左方元素的地址赋值给a[3]</span><br><span class="line">      if ( i30 &lt; 14 )</span><br><span class="line">        *(_DWORD *)(v5[15 * i29 + i30] + 16) = v5[15 * i29 + 1 + i30];  //将右方元素的地址赋值给a[4]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;       //下面是定义起点和终点</span><br><span class="line">  v2 = (_DWORD *)v5[0];      //先取出v5第一个元素，转化为地址赋值给v2</span><br><span class="line">  *a1 = *(_DWORD *)v5[0];    //a1是起点，将V5第一个元素指向的值传给a1指向的地址（传的是1或0）</span><br><span class="line">  a1[1] = v2[1];     		 //将v2[1]（对应前面双循环赋值的上方元素）赋值给a1[1]</span><br><span class="line">  a1[2] = v2[2];			 //将v2[2]（对应前面双循环赋值的下方元素）赋值给a1[2]</span><br><span class="line">  a1[3] = v2[3];			 //将v2[3]（对应前面双循环赋值的左方元素）赋值给a1[3]</span><br><span class="line">  a1[4] = v2[4];			 //将v2[4]（对应前面双循环赋值的右方元素）赋值给a1[4]</span><br><span class="line">  v3 = v7;		//下面就是定义终点了，逻辑与定义起点相同</span><br><span class="line">  *a2 = *v7;</span><br><span class="line">  a2[1] = v3[1];</span><br><span class="line">  a2[2] = v3[2];</span><br><span class="line">  a2[3] = v3[3];</span><br><span class="line">  result = v3[4];</span><br><span class="line">  a2[4] = result;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>a[0]处存的是v5[i]指向的地址的值（0或1），a[1]~a[4]正常情况填的都是地址，如果上下左右对应的地方（地图v5里面）不存在值的话就不用填入地址</p>
<p>![屏幕截图 2024-12-03 222145](.&#x2F;蜀道山wp&#x2F;屏幕截图 2024-12-03 222145.png)</p>
<p>判断函数如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char __cdecl judge_path(_DWORD *a1, _DWORD *a2, int a3)  //a1是位置，a2是终点，a3是输入</span><br><span class="line">&#123;</span><br><span class="line">  for ( i = 0; *(_BYTE *)(i + a3); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( *(_BYTE *)(i + a3) == &#x27;U&#x27; &amp;&amp; a1[1] &amp;&amp; !*(_DWORD *)a1[1] )   //输入&quot;U&quot;且上方元素存在</span><br><span class="line">    &#123;</span><br><span class="line">      a1 = (_DWORD *)a1[1];     //a1[1]存的是其上方的地址</span><br><span class="line">    &#125;</span><br><span class="line">    else if ( *(_BYTE *)(i + a3) == &#x27;D&#x27; &amp;&amp; a1[2] &amp;&amp; !*(_DWORD *)a1[2] )   //&quot;D&quot;则取其下方的地址</span><br><span class="line">    &#123;</span><br><span class="line">      a1 = (_DWORD *)a1[2];   </span><br><span class="line">    &#125;</span><br><span class="line">    else if ( *(_BYTE *)(i + a3) == &#x27;L&#x27; &amp;&amp; a1[3] &amp;&amp; !*(_DWORD *)a1[3] )</span><br><span class="line">    &#123;</span><br><span class="line">      a1 = (_DWORD *)a1[3];     //a1[3]存的是其左方的地址</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      if ( *(_BYTE *)(i + a3) != &#x27;R&#x27; || !a1[4] || *(_DWORD *)a1[4] )</span><br><span class="line">        return 0;</span><br><span class="line">      a1 = (_DWORD *)a1[4];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  result = (char)a2;</span><br><span class="line">  if ( a1[2] == a2[2] )    //下面是判断其上下左右的值是否对的上，如果对的上，这返回1</span><br><span class="line">  &#123;</span><br><span class="line">    result = (char)a2;</span><br><span class="line">    if ( a1[1] == a2[1] )</span><br><span class="line">    &#123;</span><br><span class="line">      result = (char)a2;</span><br><span class="line">      if ( a1[3] == a2[3] )</span><br><span class="line">      &#123;</span><br><span class="line">        result = (char)a2;</span><br><span class="line">        if ( a1[4] == a2[4] )</span><br><span class="line">          return 1;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以真正的地图就是v5[i]指向的位置汇成的一张15x15的地图，由0和1构成。</p>
<p>怎么提取出地图来呢？可以把伪代码复制修改再运行一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">  int i28; // [esp+384h] [ebp-A0h]</span><br><span class="line">  int i27; // [esp+388h] [ebp-9Ch]</span><br><span class="line">  int i26; // [esp+38Ch] [ebp-98h]</span><br><span class="line">  int i25; // [esp+390h] [ebp-94h]</span><br><span class="line">  int i24; // [esp+394h] [ebp-90h]</span><br><span class="line">  int i23; // [esp+398h] [ebp-8Ch]</span><br><span class="line">  int i22; // [esp+39Ch] [ebp-88h]</span><br><span class="line">  int i21; // [esp+3A0h] [ebp-84h]</span><br><span class="line">  int i20; // [esp+3A4h] [ebp-80h]</span><br><span class="line">  int i19; // [esp+3A8h] [ebp-7Ch]</span><br><span class="line">  int i18; // [esp+3ACh] [ebp-78h]</span><br><span class="line">  int i17; // [esp+3B0h] [ebp-74h]</span><br><span class="line">  int i16; // [esp+3B4h] [ebp-70h]</span><br><span class="line">  int i15; // [esp+3B8h] [ebp-6Ch]</span><br><span class="line">  int i14; // [esp+3BCh] [ebp-68h]</span><br><span class="line">  int i13; // [esp+3C0h] [ebp-64h]</span><br><span class="line">  int i12; // [esp+3C4h] [ebp-60h]</span><br><span class="line">  int i11; // [esp+3C8h] [ebp-5Ch]</span><br><span class="line">  int i10; // [esp+3CCh] [ebp-58h]</span><br><span class="line">  int i9; // [esp+3D0h] [ebp-54h]</span><br><span class="line">  int i8; // [esp+3D4h] [ebp-50h]</span><br><span class="line">  int i7; // [esp+3D8h] [ebp-4Ch]</span><br><span class="line">  int i6; // [esp+3DCh] [ebp-48h]</span><br><span class="line">  int i5; // [esp+3E0h] [ebp-44h]</span><br><span class="line">  int i4; // [esp+3E4h] [ebp-40h]</span><br><span class="line">  int i3; // [esp+3E8h] [ebp-3Ch]</span><br><span class="line">  int i2; // [esp+3ECh] [ebp-38h]</span><br><span class="line">  int i1; // [esp+3F0h] [ebp-34h]</span><br><span class="line">  int nn; // [esp+3F4h] [ebp-30h]</span><br><span class="line">  int mm; // [esp+3F8h] [ebp-2Ch]</span><br><span class="line">  int kk; // [esp+3FCh] [ebp-28h]</span><br><span class="line">  int jj; // [esp+400h] [ebp-24h]</span><br><span class="line">  int ii; // [esp+404h] [ebp-20h]</span><br><span class="line">  int n; // [esp+408h] [ebp-1Ch]</span><br><span class="line">  int m; // [esp+40Ch] [ebp-18h]</span><br><span class="line">  int k; // [esp+410h] [ebp-14h]</span><br><span class="line">  int j; // [esp+414h] [ebp-10h]</span><br><span class="line">  int i; // [esp+418h] [ebp-Ch]</span><br><span class="line">  int i30; // [esp+41Ch] [ebp-8h]</span><br><span class="line">  int i29; // [esp+420h] [ebp-4h]</span><br><span class="line">    int maze[225]=&#123;0&#125;;</span><br><span class="line">    int *v5=maze;</span><br><span class="line">    int *v6=maze+105;</span><br><span class="line">  for ( k = 1; k &lt; 15; ++k )</span><br><span class="line">    v5[k] = 1;</span><br><span class="line">  for ( m = 9; m &lt; 15; ++m )</span><br><span class="line">    v5[m + 15] = 1;</span><br><span class="line">  for ( n = 0; n &lt; 2; ++n )</span><br><span class="line">    v5[n + 30] = 1;</span><br><span class="line">  for ( ii = 3; ii &lt; 8; ++ii )</span><br><span class="line">    v5[ii + 30] = 1;</span><br><span class="line">  for ( jj = 9; jj &lt; 15; ++jj )</span><br><span class="line">    v5[jj + 30] = 1;</span><br><span class="line">  for ( kk = 0; kk &lt; 2; ++kk )</span><br><span class="line">    v5[kk + 45] = 1;</span><br><span class="line">  for ( mm = 3; mm &lt; 8; ++mm )</span><br><span class="line">    v5[mm + 45] = 1;</span><br><span class="line">  for ( nn = 12; nn &lt; 15; ++nn )</span><br><span class="line">    v5[nn + 45] = 1;</span><br><span class="line">  for ( i1 = 0; i1 &lt; 2; ++i1 )</span><br><span class="line">    v5[i1 + 60] = 1;</span><br><span class="line">  for ( i2 = 7; i2 &lt; 10; ++i2 )</span><br><span class="line">    v5[i2 + 60] = 0;</span><br><span class="line">  v5[67] = 1;</span><br><span class="line">  for ( i3 = 11; i3 &lt; 15; ++i3 )</span><br><span class="line">    v5[i3 + 60] = 1;</span><br><span class="line">  for ( i4 = 0; i4 &lt; 2; ++i4 )</span><br><span class="line">    v5[i4 + 75] = 1;</span><br><span class="line">  for ( i5 = 3; i5 &lt; 6; ++i5 )</span><br><span class="line">    v5[i5 + 75] = 1;</span><br><span class="line">  for ( i6 = 11; i6 &lt; 15; ++i6 )</span><br><span class="line">    v5[i6 + 75] = 1;</span><br><span class="line">  for ( i7 = 0; i7 &lt; 2; ++i7 )</span><br><span class="line">    v5[i7 + 90] = 1;</span><br><span class="line">  v5[92] = 0;</span><br><span class="line">  for ( i8 = 3; i8 &lt; 6; ++i8 )</span><br><span class="line">    v5[i8 + 90] = 1;</span><br><span class="line">  for ( i9 = 7; i9 &lt; 10; ++i9 )</span><br><span class="line">    v5[i9 + 90] = 1;</span><br><span class="line">  for ( i10 = 11; i10 &lt; 15; ++i10 )</span><br><span class="line">    v5[i10 + 90] = 1;</span><br><span class="line">  v6[0] = 1;</span><br><span class="line">  v6[1] = 0;</span><br><span class="line">  v6[2] = 0;</span><br><span class="line">  v6[3] = 1;</span><br><span class="line">  for ( i11 = 4; i11 &lt; 6; ++i11 )</span><br><span class="line">    v6[i11] = 1;</span><br><span class="line">  for ( i12 = 7; i12 &lt; 10; ++i12 )</span><br><span class="line">    v6[i12] = 1;</span><br><span class="line">  for ( i13 = 11; i13 &lt; 15; ++i13 )</span><br><span class="line">    v6[i13] = 1;</span><br><span class="line">  for ( i14 = 0; i14 &lt; 2; ++i14 )</span><br><span class="line">    v6[i14 + 15] = 1;</span><br><span class="line">  for ( i15 = 7; i15 &lt; 10; ++i15 )</span><br><span class="line">    v6[i15 + 15] = 1;</span><br><span class="line">  for ( i16 = 11; i16 &lt; 15; ++i16 )</span><br><span class="line">    v6[i16 + 15] = 1;</span><br><span class="line">  for ( i17 = 0; i17 &lt; 6; ++i17 )</span><br><span class="line">    v6[i17 + 30] = 1;</span><br><span class="line">  for ( i18 = 7; i18 &lt; 10; ++i18 )</span><br><span class="line">    v6[i18 + 30] = 1;</span><br><span class="line">  for ( i19 = 11; i19 &lt; 15; ++i19 )</span><br><span class="line">    v6[i19 + 30] = 1;</span><br><span class="line">  for ( i20 = 0; i20 &lt; 6; ++i20 )</span><br><span class="line">    v6[i20 + 45] = 1;</span><br><span class="line">  for ( i21 = 11; i21 &lt; 15; ++i21 )</span><br><span class="line">    v6[i21 + 45] = 1;</span><br><span class="line">  for ( i22 = 0; i22 &lt; 9; ++i22 )</span><br><span class="line">    v6[i22 + 60] = 1;</span><br><span class="line">  for ( i23 = 13; i23 &lt; 15; ++i23 )</span><br><span class="line">    v6[i23 + 60] = 1;</span><br><span class="line">  for ( i24 = 0; i24 &lt; 9; ++i24 )</span><br><span class="line">    v6[i24 + 75] = 1;</span><br><span class="line">  v6[84] = 0;</span><br><span class="line">  v6[85] = 1;</span><br><span class="line">  v6[86] = 1;</span><br><span class="line">  v6[87] = 0;</span><br><span class="line">  for ( i25 = 13; i25 &lt; 15; ++i25 )</span><br><span class="line">    v6[i25 + 75] = 1;</span><br><span class="line">  for ( i26 = 0; i26 &lt; 9; ++i26 )</span><br><span class="line">    v6[i26 + 90] = 1;</span><br><span class="line">  v6[99] = 0;</span><br><span class="line">  v6[100] = 1;</span><br><span class="line">  v6[101] = 1;</span><br><span class="line">  v6[102] = 0;</span><br><span class="line">  for ( i27 = 13; i27 &lt; 15; ++i27 )</span><br><span class="line">    v6[i27 + 90] = 1;</span><br><span class="line">  for ( i28 = 0; i28 &lt; 12; ++i28 )</span><br><span class="line">    v6[i28 + 105] = 1;</span><br><span class="line">  for(i=0;i&lt;15;i++)&#123;</span><br><span class="line">    for(j=0;j&lt;15;j++)&#123;</span><br><span class="line">        if(maze[i*15+j]==0) printf(&quot;  &quot;);   //这里不打印0和1是为了让打印出地图更好看</span><br><span class="line">        else printf(&quot;o &quot;,maze[i*15+j]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  o o o o o o o o o o o o o o </span><br><span class="line">                  o o o o o o</span><br><span class="line">o o   o o o o o   o o o o o o</span><br><span class="line">o o   o o o o o         o o o</span><br><span class="line">o o           o       o o o o</span><br><span class="line">o o   o o o           o o o o</span><br><span class="line">o o   o o o   o o o   o o o o</span><br><span class="line">o     o o o   o o o   o o o o</span><br><span class="line">o o           o o o   o o o o</span><br><span class="line">o o o o o o   o o o   o o o o</span><br><span class="line">o o o o o o           o o o o</span><br><span class="line">o o o o o o o o o         o o</span><br><span class="line">o o o o o o o o o   o o   o o</span><br><span class="line">o o o o o o o o o   o o   o o</span><br><span class="line">o o o o o o o o o o o o</span><br></pre></td></tr></table></figure>

<p>路径：DRRDDDDDDDRRRRDDRRRDRRRDDDRR</p>
<p>md5结果：1979869e0c4ef6c542e54ae5c48f63ec</p>
<p>flag：LZSDS{1979869e0c4ef6c542e54ae5c48f63ec}</p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
</search>
